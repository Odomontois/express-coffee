// Generated by CoffeeScript 1.6.3
(function() {
  var bold, build, exec, fs, green, log, pkg, print, red, reset, spawn, startCmd, test, testCmd, which, wrench, _ref;

  fs = require('fs');

  wrench = require('wrench');

  print = require('util').print;

  which = require('which');

  _ref = require('child_process'), spawn = _ref.spawn, exec = _ref.exec;

  bold = '\x1B[0;1m';

  red = '\x1B[0;31m';

  green = '\x1B[0;32m';

  reset = '\x1B[0m';

  pkg = JSON.parse(fs.readFileSync('./package.json'));

  testCmd = pkg.scripts.test;

  startCmd = pkg.scripts.start;

  log = function(message, color, explanation) {
    return console.log(color + message + reset + ' ' + (explanation || ''));
  };

  build = function(callback) {
    var cmd, coffee, options;
    options = ['-c', '-b', '-o', '.app', 'src'];
    cmd = which.sync('coffee');
    coffee = spawn(cmd, options);
    coffee.stdout.pipe(process.stdout);
    coffee.stderr.pipe(process.stderr);
    return coffee.on('exit', function(status) {
      if (status === 0) {
        return typeof callback === "function" ? callback() : void 0;
      }
    });
  };

  test = function(callback) {
    var cmd, err, options, spec;
    options = ['--globals', 'hasCert,res', '--reporter', 'spec', '--compilers', 'coffee:coffee-script', '--colors', '--require', 'should', '--require', './server'];
    try {
      cmd = which.sync('mocha');
      spec = spawn(cmd, options);
      spec.stdout.pipe(process.stdout);
      spec.stderr.pipe(process.stderr);
      return spec.on('exit', function(status) {
        if (status === 0) {
          return typeof callback === "function" ? callback() : void 0;
        }
      });
    } catch (_error) {
      err = _error;
      log(err.message, red);
      return log('Mocha is not installed - try npm install mocha -g', red);
    }
  };

  task('docs', 'Generate annotated source code with Docco', function() {
    var cmd, docco, err, file, files;
    files = wrench.readdirSyncRecursive("src");
    files = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        if (/\.coffee$/.test(file)) {
          _results.push("src/" + file);
        }
      }
      return _results;
    })();
    log(files);
    try {
      cmd = './node_modules/.bin/docco-husky';
      docco = spawn(cmd, files);
      docco.stdout.pipe(process.stdout);
      docco.stderr.pipe(process.stderr);
      return docco.on('exit', function(status) {
        if (status === 0) {
          return typeof callback === "function" ? callback() : void 0;
        }
      });
    } catch (_error) {
      err = _error;
      log(err.message, red);
      return log('Docco is not installed - try npm install docco -g', red);
    }
  });

  task('build', function() {
    return build(function() {
      return log(":)", green);
    });
  });

  task('spec', 'Run Mocha tests', function() {
    return build(function() {
      return test(function() {
        return log(":)", green);
      });
    });
  });

  task('test', 'Run Mocha tests', function() {
    return build(function() {
      return test(function() {
        return log(":)", green);
      });
    });
  });

  task('dev', 'start dev env', function() {
    var cmd, coffee, options, supervisor;
    options = ['-c', '-b', '-w', '-o', '.app', 'src'];
    cmd = which.sync('coffee');
    coffee = spawn(cmd, options);
    coffee.stdout.pipe(process.stdout);
    coffee.stderr.pipe(process.stderr);
    log('Watching coffee files', green);
    supervisor = spawn('node', ['./node_modules/supervisor/lib/cli-wrapper.js', '-w', '.app,views,assets', '-e', 'js|jade', 'server']);
    supervisor.stdout.pipe(process.stdout);
    supervisor.stderr.pipe(process.stderr);
    return log('Watching js files and running server', green);
  });

  task('debug', 'start debug env', function() {
    var app, chrome, cmd, coffee, inspector, options;
    options = ['-c', '-b', '-w', '-o', '.app', 'src'];
    cmd = which.sync('coffee');
    coffee = spawn(cmd, options);
    coffee.stdout.pipe(process.stdout);
    coffee.stderr.pipe(process.stderr);
    log('Watching coffee files', green);
    app = spawn('node', ['--debug', 'server']);
    app.stdout.pipe(process.stdout);
    app.stderr.pipe(process.stderr);
    inspector = spawn('node-inspector');
    inspector.stdout.pipe(process.stdout);
    inspector.stderr.pipe(process.stderr);
    chrome = spawn('google-chrome', ['http://0.0.0.0:8080/debug?port=5858']);
    chrome.stdout.pipe(process.stdout);
    chrome.stderr.pipe(process.stderr);
    return log('Debugging server', green);
  });

  option('-n', '--name [NAME]', 'name of model to `scaffold`');

  task('scaffold', 'scaffold model/controller/test', function(options) {
    var scaffold;
    if (options.name == null) {
      log("Please specify model name", red);
      process.exit(1);
    }
    log("Scaffolding `" + options.name + "`", green);
    scaffold = require('./scaffold');
    return scaffold(options.name);
  });

}).call(this);
